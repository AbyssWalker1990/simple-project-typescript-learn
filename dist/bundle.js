(()=>{"use strict";class e{constructor(e,t,n,r){const i=document.getElementById(e),s=document.getElementById(t);if(null==i)throw new Error("There is no element with this identifier");if(this.templateElement=i,null==s)throw new Error("There is no element with this identifier");this.hostElement=s;const l=document.importNode(this.templateElement.content,!0);this.element=l.firstElementChild,null!=r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}function t(e){let t=!0;return null!==e.required&&(t=t&&0!==e.value.toString().trim().length),null!==e.minLength&&void 0!==e.minLength&&"string"==typeof e.value&&(t=t&&e.value.length>=e.minLength),null!==e.maxLength&&void 0!==e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.length<=e.maxLength),null!=e.min&&"number"==typeof+e.value&&(t=t&&e.value>=e.min),null!=e.max&&"number"==typeof+e.value&&(t=t&&e.value<=e.max),t}var n;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(n||(n={}));class r{constructor(e,t,n,r,i){this.id=e,this.title=t,this.description=n,this.people=r,this.status=i}}class i{constructor(){this.listeners=[]}addListener(e){this.listeners.push(e)}}class s extends i{constructor(){super(),this.projects=[]}static getInstance(){return null!=this.instance||(this.instance=new s),this.instance}addProject(e,t,i){const s=new r(Math.random().toString(),e,t,i,n.Active);this.projects.push(s),this.updateListeners()}moveProject(e,t){const n=this.projects.find((t=>t.id===e));null!=n&&n.status!==t&&(n.status=t,this.updateListeners())}updateListeners(){for(const e of this.listeners)e(this.projects.slice())}}const l=s.getInstance();function o(e,t,n){const r=n.value;return{configurable:!0,enumerable:!1,get(){return r.bind(this)}}}class a extends e{constructor(){super("project-input","app",!0,"user-input");const e=this.element.querySelector("#title"),t=this.element.querySelector("#description"),n=this.element.querySelector("#people");if(null===e)throw new Error("There is no element with this identifier");if(this.titleInputElement=e,null===t)throw new Error("There is no element with this identifier");if(this.descriptionInputElement=t,null===n)throw new Error("There is no element with this identifier");this.peopleInputElement=n,this.configure()}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){}gatherUserInput(){const e=this.titleInputElement.value,n=this.descriptionInputElement.value,r=this.peopleInputElement.value,i={value:n,required:!0,minLength:5},s={value:r,required:!0,min:1,max:5};if(t({value:e,required:!0})&&t(i)&&t(s))return[e,n,+r];throw alert("Invalid input, please try again"),new Error("Invalid input")}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}submitHandler(e){e.preventDefault();const t=this.gatherUserInput();if(Array.isArray(t)){const[e,n,r]=t;null!==l&&l.addProject(e,n,r),this.clearInputs()}}}!function(e,t,n,r){var i,s=arguments.length,l=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(i=e[o])&&(l=(s<3?i(l):s>3?i(t,n,l):i(t,n))||l);s>3&&l&&Object.defineProperty(t,n,l)}([o],a.prototype,"submitHandler",null);class c extends e{get persons(){const e=this.project.people.toString();return 1===this.project.people?"1 person":`${e} persons`}constructor(e,t){super("single-project",e,!1,t.id),this.project=t,this.configure(),this.renderContent()}dragStartHandler(e){const t=e.dataTransfer;null!==t&&(t.setData("text/plain",this.project.id),t.effectAllowed="move")}dragEndHandler(e){console.log("DragEnd")}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){const e=this.element.querySelector("h2"),t=this.element.querySelector("h3"),n=this.element.querySelector("p");null!==e&&(e.textContent=this.project.title),null!==t&&(t.textContent=this.project.description.toString()),null!==n&&(n.textContent=this.persons+" assigned.")}}!function(e,t,n,r){var i,s=arguments.length,l=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(i=e[o])&&(l=(s<3?i(l):s>3?i(t,n,l):i(t,n))||l);s>3&&l&&Object.defineProperty(t,n,l)}([o],c.prototype,"dragStartHandler",null);var h=function(e,t,n,r){var i,s=arguments.length,l=s<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(i=e[o])&&(l=(s<3?i(l):s>3?i(t,n,l):i(t,n))||l);return s>3&&l&&Object.defineProperty(t,n,l),l};class u extends e{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){null!=e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dropHandler(e){const t=e.dataTransfer?.getData("text/plain");l.moveProject(t,"active"===this.type?n.Active:n.Finished)}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),l.addListener((e=>{const t=e.filter((e=>"active"===this.type?e.status===n.Active:e.status===n.Finished));this.assignedProjects=t,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`,t=this.element.querySelector("ul");if(null==t)throw new Error("There is no element with this identifier");t.id=e;const n=this.element.querySelector("h2");if(null==n)throw new Error("There is no element with this identifier");n.textContent=this.type.toUpperCase()+" PROJECTS"}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";const e=this.element.querySelector("ul");for(const t of this.assignedProjects)null!==e&&new c(e.id,t)}}h([o],u.prototype,"dragOverHandler",null),h([o],u.prototype,"dropHandler",null),h([o],u.prototype,"dragLeaveHandler",null),new a,new u("active"),new u("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,